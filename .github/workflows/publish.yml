name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.3

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm build

      - name: Read package metadata
        id: package
        run: |
          echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check npm for existing version
        id: npm
        env:
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
          PACKAGE_VERSION: ${{ steps.package.outputs.version }}
        run: |
          if npm view "${PACKAGE_NAME}@${PACKAGE_VERSION}" > /dev/null 2>&1; then
            echo "published=true" >> $GITHUB_OUTPUT
          else
            echo "published=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip npm publish
        if: steps.npm.outputs.published == 'true'
        run: echo "Version ${{ steps.package.outputs.version }} is already published on npm; skipping publish."

      - name: Publish to npm
        if: steps.npm.outputs.published == 'false'
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check for existing GitHub release
        id: release
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              return 'true';
            } catch (error) {
              if (error.status === 404) {
                return 'false';
              }
              throw error;
            }

      - name: Create GitHub release
        if: steps.release.outputs.result == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.package.outputs.version }}
          generate_release_notes: true
